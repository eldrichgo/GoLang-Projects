package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"server/dal/todo"
	"server/graph/model"
	"strconv"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.InputTask) (*model.Task, error) {
	svc := todo.NewTaskService(todo.NewTaskRepository(r.Db))
	t, err := svc.CreateTask(input)

	if err != nil {
		return nil, err
	}

	return t, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, title *string, status *string) (*model.Task, error) {
	svc := todo.NewTaskService(todo.NewTaskRepository(r.Db))
	taskID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid task ID format")
	}
	// Get all tasks and find the task to be updated
	tasks, err := svc.GetAllTasks()
	if err != nil {
		return nil, err
	}
	var task *model.Task
	for _, t := range tasks {
		if t.ID == taskID {
			task = &t
			break
		}
	}
	if task == nil {
		return nil, fmt.Errorf("task not found")
	}
	if title != nil {
		task.Title = *title
	}
	if status != nil {
		task.Status = *status
	}

	t, err := svc.UpdateTaskStatus(task.ID, task.Status)
	if err != nil {
		return nil, err
	}

	return t, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (*bool, error) {
	svc := todo.NewTaskService(todo.NewTaskRepository(r.Db))
	taskID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid task ID format")
	}
	err = svc.DeleteTask(taskID)
	if err != nil {
		return nil, err
	}
	success := true
	return &success, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	svc := todo.NewTaskService(todo.NewTaskRepository(r.Db))
	tasks, err := svc.GetAllTasks()
	if err != nil {
		return nil, err
	}

	var result []*model.Task
	for _, task := range tasks {
		result = append(result, &model.Task{
			ID:     task.ID,
			Title:  task.Title,
			Status: task.Status,
		})
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
